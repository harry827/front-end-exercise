url.parse：将一个URL字符串转换为URL对象

  http://user:pass@host.com:8080/p/a/t/h?query=string#hash -->
    {
        protocol: 'http:',
        slashes: true,
        auth: 'user:pass',
        host: 'host.com:8080',
        port: '8080',
        hostname: 'host.com',
        hash: '#hash',
        search: '?query=string',
        query: 'query=string',
        pathname: '/p/a/t/h',
        path: '/p/a/t/h?query=string',
        href: 'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'
     }
 
url.format：与url.parse相反
 
url.resolve：用于拼接URL
       url.resolve('http://www.localhost:8080/111/222', '/abc'); --> http://www.localhost:8080/abc
       url.resolve('http://www.localhost:8080/111/222', 'abc') --> http://www.localhost:8080/111/abc
       url.resolve('http://www.localhost:8080/111/222/', 'abc') --> http://www.localhost:8080/111/222/abc
 

正则表达式：
      ^ 匹配输入字符串的开始位置
      ? 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。
      (?!pattern) 非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，
                  该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，
                  但不能匹配“Windows2000”中的“Windows”。
      [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。
      \s 匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。
      * 匹配前面的子表达式任意次。例如，zo能匹配“z”，“zo”以及“zoo”，但是不匹配“bo”。等价于{0,}。
      $ 匹配输入字符串的结束位置。
